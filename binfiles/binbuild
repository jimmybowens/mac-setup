#!/bin/bash
while (( $# ));do
  if [ -z "$1" ];then
    echo "ERROR: cannot use empty params"
    exit 1
  elif [ "$1" == '-d' ];then
    shift
    if [ -z "$1" ];then
      echo "ERROR: no value entered for working directory"
      exit 1
    fi
    if [ ! -d "$1" ];then
      echo "ERROR: must be a directory, got $1"
      exit 1
    fi
    if [ "$1" == '.' ];then
      #expand
      CURR_DIRECTORY="$PWD"
    else
      CURR_DIRECTORY="$1"
    fi
    shift
  else
    echo "ERROR: invalid param $1"
    exit 1
  fi
done
if [ -z "$CURR_DIRECTORY" ];then
  CURR_DIRECTORY="$PWD"
fi
declare -a objects
INC_DIR="$CURR_DIRECTORY/include"
SRC_DIR="$CURR_DIRECTORY/src"
BUILD_DIR="$CURR_DIRECTORY/build"
BIN_DIR="$CURR_DIRECTORY/bin"
LOCK_DIR="$CURR_DIRECTORY/lock"
BIN_INSTALL_DIR="/usr/local/bin"
CURR_USER=$(whoami)
BINNAME="${CURR_DIRECTORY##*/}"
let BUILD_ERROR_COUNT=0
if [ -z "$CURR_USER" ];then
  echo "cannot get current user"
  exit 1
elif [ "$CURR_USER" != 'root' ];then
  echo "user must be root, got $CURR_USER"
  exit 1
fi

if [ ! -d "$INC_DIR" ] || [ ! -d "$SRC_DIR" ];then
  echo "$BINNAME is not a C project"
  exit 1
fi

if [ ! -d "$BUILD_DIR" ];then
  mkdir -p "$BUILD_DIR" > /dev/null 2>&1
  if [ ! -d "$BUILD_DIR" ];then
    echo "could not create build directory"
    exit 1
  fi
fi

if [ ! -d "$LOCK_DIR" ];then
  mkdir -p "$LOCK_DIR" > /dev/null 2>&1
  if [ ! -d "$LOCK_DIR" ];then
    echo "could not create lock directory"
    exit 1
  fi
fi

if [ ! -d "$BIN_DIR" ];then
  mkdir -p "$BIN_DIR" > /dev/null 2>&1
  if [ ! -d "$BIN_DIR" ];then
    echo "could not create bin directory"
    exit 1
  fi
fi

which stat > /dev/null 2>&1
if [ $? -ne 0 ];then
  echo "an error has occured"
  exit 1
fi
main=
let maincount=0
let buildcount=0
for s in "$SRC_DIR"/*.c;do
  if [ -f "$s" ];then
    if grep 'main' "$s" > /dev/null 2>&1;then
      let maincount++
      main="$s"
    fi
    #check last modification date against stored modification date
    name="${s##*/}"
    name="${name%.*}"
    last_modified=$(stat -f "%Sm" -t %s $s 2> /dev/null )
    if [ ! -f "$LOCK_DIR/$name" ];then
      gcc -I "$INC_DIR" -c "$s" -o "$BUILD_DIR/$name.o"
      if [ $? -ne 0 ];then
	let BUILD_ERROR_COUNT++
	continue
      fi
      echo "$last_modified" > "$LOCK_DIR/$name"
      echo "INFO: built $name.c for the first time"
      let buildcount++
    else
      previous_modified=$(cat "$LOCK_DIR/$name")
      let mod_diff=$((last_modified - previous_modified))
      if [ $mod_diff -gt 0 ];then
	if [ -e "$BUILD_DIR/$name.o" ];then
	  rm -f "$BUILD_DIR/$name.o" > /dev/null 2>&1
	fi
	gcc -I "$INC_DIR" -c "$s" -o "$BUILD_DIR/$name.o"
	if [ $? -ne 0 ];then
	  let BUILD_ERROR_COUNT++
	  continue
	fi
	echo "$last_modified" > "$LOCK_DIR/$name"
	echo "INFO: rebuilt $name.c, changed $mod_diff seconds after last built"
	let buildcount++
      else
	echo "INFO: $name.c has not changed"
      fi
    fi
  fi
done

#if [ "$buildcount" -gt 0 ] && [ "$BUILD_ERROR_COUNT" -eq 0 ] && [ "$maincount" -eq 1 ];then
if [ "$BUILD_ERROR_COUNT" -eq 0 ] && [ "$maincount" -eq 1 ] && [ "$buildcount" -gt 0 ];then
  for o in "$BUILD_DIR"/*.o;do
    if [ -e "$o" ];then
      #skip files whose source files have been deleted
      name="${o##*/}"
      name="${name%.*}"
      if [ -e "$SRC_DIR/$name.c" ];then
	objects+=("$o")
      fi
    fi
  done
  if [ -e "$BIN_DIR/$BINNAME" ];then
    rm -f "$BIN_DIR/$BINNAME" > /dev/null 2>&1
  fi
  if [ "${#objects[@]}" -gt 0 ];then
    gcc -Wall -lclib -o "$BIN_DIR/$BINNAME" "${objects[@]}"
    if [ -e "$BIN_DIR/$BINNAME" ];then
      echo "INFO: executable created at $BIN_DIR/$BINNAME"
    fi
  fi
else
  if [ "$BUILD_ERROR_COUNT" -ne 0 ];then
    echo "ERROR: refusing to build binfile because errors present"
  elif [ "$maincount" -ne 1 ];then
    echo "ERROR: refusing to build binfile because of problems with main function"
  else
    if [ ! -e "$BIN_DIR/$BINNAME" ];then
      if [ "${#objects[@]}" -gt 0 ];then
	gcc -Wall -lclib -o "$BIN_DIR/$BINNAME" "${objects[@]}"
	if [ -e "$BIN_DIR/$BINNAME" ];then
	  echo "INFO: executable created at $BIN_DIR/$BINNAME"
	fi
      fi
    fi
  fi
fi

if [ -z "$main" ];then
  echo "ERROR: could not find a file with the main entry function"
elif [ "$maincount" -gt 1 ];then
  echo "ERROR: multiple main functions detected"
else
  echo "INFO: main function found in $main"
fi
if [ "$BUILD_ERROR_COUNT" -gt 0 ];then
  echo "ERROR: finished building with $BUILD_ERROR_COUNT errors"
else
  echo "INFO: finished building"
fi
