#!/bin/bash
let is_init=0
abort_not_init()
{
  if [ "$is_init" -eq 0 ];then
    die "call init first"
  fi
}
inarray()
{
  let inarray_index=-1
  local idx=0
  declare -a values
  while [ $# -gt 0 ];do
    if [ -z "$1" ];then
      shift
      return 1
    elif [ "$1" == '--term' ];then
      shift
      if [ -z "$1" ];then
	return 1
      else
	term="$1"
	shift
      fi
    elif [ "$1" == '--values' ];then
      shift
      if [ -z "$1" ];then
	return 1
      fi
      while [ $# -gt 0 ];do
	if [ "$1" == '--term' ] || [ "$1" == '--values' ];then
	  break
	fi
	values+=("$1")
	shift
      done
    else
      shift
    fi
  done
  if [ "${#values[@]}" -eq 0 ];then
    return 1
  elif [ -z "$term" ];then
    unset values
    return 1
  fi
  for item in "${values[@]}";do
    if [ "$item" == "$term" ];then
      unset values
      inarray_index=$idx
      return 0
    fi
    let idx++
  done
  unset values
  return 1
}
colorized()
{
  declare -a colored_output
  while [ $# -gt 0 ];do
    if [ "$1" == '--red' ];then
      shift
      if [ -z "$1" ];then
	shift
	continue
      fi
      while [ $# -gt 0 ];do
	if inarray --term "$1" --values '--green' '--red' '--white';then
	  break
	fi
	colored_output+=("\033[31m$1\033[0m")
	shift
      done
    elif [ "$1" == '--white' ];then
      shift
      if [ -z "$1" ];then
	shift
	continue 
      fi
      while [ $# -gt 0 ];do
	if inarray --term "$1" --values '--green' '--red' '--white';then
	  break
	fi
	colored_output+=("\033[97m$1\033[0m")
	shift
      done
    elif [ "$1" == '--green' ];then
      shift
      if [ -z "$1" ];then
	shift
	continue 
      fi
      while [ $# -gt 0 ];do
	if inarray --term "$1" --values '--green' '--red' '--white';then
	  break
	fi
	colored_output+=("\033[32m$1\033[0m")
	shift
      done
    else
      colored_output+=("$1")
      shift
    fi
  done
  for color in "${colored_output[@]}";do
    echo -ne "$color" 
  done
  echo
  unset colored_output
}

let error_status=0
dieformat()
{
  if [ -t 2 ];then
    echo -ne "\033[4;31mERROR\033[0m: " >&2
  else
    echo -ne "ERROR: " >&2
  fi
  if [ $# -gt 0 ];then
    echo "$*" >&2
  fi
}
infoformat()
{
  if [ $# -gt 0 ];then
    colorized --green "INFO: " --white "$*"
  fi
}
die()
{
  let error_status++
  dieformat "$@"
  exit $error_status
}
isroot()
{
  root=$(whoami) 2> /dev/null
  if [ -z "$root" ];then
    return 1
  elif [ "$root" != 'root' ];then
    return 1
  else
    return 0
  fi
}
make_directories()
{
  while [ $# -gt 0 ];do
    if [ -z "$1" ];then
      dieformat "cannot build directory with empty name"
      return 1
    elif [ -d "$1" ];then
      shift
      continue
    else
      mkdir -p "$1" > /dev/null 2>&1
      if [ ! -d "$1" ];then
	return 1
      fi
    fi
    shift
  done
  return 0
}
parse_file_path()
{
  parsed_directory_path=
  parsed_file_path=
  parsed_file_name=
  parsed_file_ext=
  if [ -z "$1" ];then
    return 1
  elif [ "$#" -gt 1 ];then
    return 1
  fi
  local file="$1"
  shift
  parsed_directory_path="${file%/*}"
  parsed_file_path="${file%.*}"
  parsed_file_name="${parsed_file_path##*/}"
  parsed_file_ext="${file##*.}"
  if [ "$parsed_file_ext" == "$file" ];then
    parsed_file_ext=
  fi
  return 0
}
validate_parent_directory()
{
 if parse_file_path "$1";then
  if [ -d "$parsed_directory_path" ];then
    return 0
  else
    return 1
  fi
 else
   return 1
 fi
}
make_unique_path()
{
  unique_path=
  if [ -z "$1" ];then
    return 1
  fi
  let local idx=1
  if parse_file_path "$1";then
    if [ -z "$parsed_file_ext" ];then
      unique_path="$parsed_file_path"
    else
      unique_path="$parsed_file_path.$parsed_file_ext"
    fi
    while [ -e "$unique_path" ];do
      if [ -z "$parsed_file_ext" ];then
	unique_path="$parsed_file_path-$idx"
      else
	unique_path="$parsed_file_path-$idx.$parsed_file_ext"
      fi
      let idx++
    done
    return 0
  else
    return 1
  fi
  return 1
}

record_file_status()
{
  if ! load_dep 'stat';then
    die "stat is not installed on this system"
  else
    STAT="$dep_result"
  fi
  if [ -z "$1" ];then
    return 1
  else
    local file="$1"
    shift
  fi
  if ! parse_file_path "$file";then
    die "could not parse file path"
  fi
  if ! make_directories "$HOME/.lock";then
    die "could not make lock directory"
  fi
  if ! make_directories "$HOME/.lock/$parsed_directory_path";then
    die "could not make file directory"
  fi
  local last_modified=$($STAT -f "%Sm" -t %s "$file" 2> /dev/null)
  if [ -z "$last_modified" ];then
    return 1
  fi
  if [ ! -e "$file" ];then
    return 1
  fi
  if [ ! -f "$HOME/.lock/$parsed_file_path.mod" ];then
    echo "$last_modified" > "$HOME/.lock/$parsed_file_path.mod"
    if [ ! -f "$HOME/.lock/$parsed_file_path.mod" ];then
      die "could not create lock file"
    fi
  else
    local previous_modified=$(cat "$HOME/.lock/$parsed_file_path.mod")
    let local mod_diff=$((last_modified - previous_modified))
    if [ -z "$previous_modified" ];then
      die "could not get previous date"
    fi
    if [ $mod_diff -gt 0 ];then
      echo "$last_modified" > "$HOME/.lock/$parsed_file_path.mod"
    fi
  fi
  return 0
}

is_file_changed()
{
  if ! load_dep 'stat';then
    die "stat is not installed on this system"
  else
    STAT="$dep_result"
  fi
  if [ -z "$1" ];then
    return 1
  else
    local file="$1"
    shift
  fi
  if ! parse_file_path "$file";then
    die "could not parse file path"
  fi
  if ! make_directories "$HOME/.lock";then
    die "could not make lock directory"
  fi
  if ! make_directories "$HOME/.lock/$parsed_directory_path";then
    die "could not make file directory"
  fi
  local last_modified=$($STAT -f "%Sm" -t %s "$file" 2> /dev/null)
  if [ -z "$last_modified" ];then
    return 1
  fi
  if [ ! -f "$HOME/.lock/$parsed_file_path.mod" ];then
    return 1
  fi
  local previous_modified=$(cat "$HOME/.lock/$parsed_file_path.mod")
  if [ -z "$previous_modified" ];then
    die "could not get previous date"
  fi
  let local mod_diff=$((last_modified - previous_modified))
  if [ $mod_diff -gt 0 ];then
    return 0
  fi
  return 1
}

is_file_new()
{
  if ! load_dep 'stat';then
    die "stat is not installed on this system"
  else
    STAT="$dep_result"
  fi
  if [ -z "$1" ];then
    return 1
  else
    local file="$1"
    shift
  fi
  if ! parse_file_path "$file";then
    die "could not parse file path"
  fi
  if ! make_directories "$HOME/.lock";then
    die "could not make lock directory"
  fi
  if ! make_directories "$HOME/.lock/$parsed_directory_path";then
    die "could not make file directory"
  fi
  local last_modified=$($STAT -f "%Sm" -t %s "$file" 2> /dev/null)
  if [ -z "$last_modified" ];then
    return 1
  fi
  if [ ! -f "$HOME/.lock/$parsed_file_path.mod" ];then
    return 0
  fi
  return 1
}

load_dep()
{
  abort_not_init
  dep_result=
  if [ $# -ne 1 ];then
    return 1
  fi
  if [ -z "$no_sub_path" ];then
    die "call init first"
  fi
  if which "$1" 2> /dev/null 1>&3;then
    read -u3 dep_result
    return 0
  fi
  return 1
}

init()
{
  if [ "$is_init" -eq 0 ];then
    if make_unique_path "/tmp/nosub";then
      no_sub_path="$unique_path"
    else
      die "could make unique path for sub"
    fi
    if ! mkfifo "$no_sub_path" > /dev/null 2>&1;then
      die "could not create sub"
    fi
    if [ ! -p "$no_sub_path" ];then
      die "no sub created"
    fi
    if ! exec 3<> "$no_sub_path";then
      rm -f "$no_sub_path" > /dev/null 2>&1
      die "could not create fd 3"
    fi
    infoformat "initialized\n\tcreated $no_sub_path\n\topened fd 3"
    let is_init++
    return 0
  else
    return 0
  fi
}

cleanup()
{
  abort_not_init
  exec 3>&-
  if rm -f "$no_sub_path" > /dev/null 2>&1;then
    infoformat "cleaned\n\tremoved $no_sub_path\n\tclosed fd 3"
  fi
}
